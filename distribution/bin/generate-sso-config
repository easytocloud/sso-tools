#!/usr/bin/env bash

set -euo pipefail

# Configuration
AWS_CONFIG_FILE="${AWS_CONFIG_FILE:-${HOME}/.aws/config}"
CONFIG_FILE_TO_WRITE=""
SSO_CACHE_DIR="${HOME}/.aws/sso/cache"
DEFAULT_SSO_REGION="eu-west-1"
DEFAULT_PROFILE_REGION="eu-west-1"
UNIFIED_ROOT="${UNIFIED_ROOT:-${HOME}/unified-environment}"

export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-$DEFAULT_SSO_REGION}

AWS_PROFILE_ORGANIZER=false

# Function to display help message
help() {
    echo "Usage: generate-sso-config [OPTIONS]"
    echo
    echo "Options:"
    echo "  --create-directories        Create a directory for each account the user can assume any role in"
    echo "  --use-ou-structure          Use the OU structure in the unified environment"
    echo "  --developer-role-name NAME  Create .envrc files for the specified role"
    echo "  --sso-name NAME             Use the specified SSO name instead of the one extracted from the SSO start URL"
    echo "  --create-repos-md           Run cclist --create-repos-md for each account directory"
    echo "  --skip-sso-name             Do not use the SSO name in the path"
    echo "  --unified-root PATH         Use a different root directory for the unified environment"
    echo "  --default-profile-region REGION Set the region for the generated profiles"
    echo "  --help                      Display this help message and exit"
}

# Function to log messages
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >&2
}

## Function to check if running in Cloud9 - if so, set UNIFIED_ROOT to ~/environment and skip SSO_NAME
check_cloud9(){
    # if username is ec2-user and a directory environment exists in the users home directory, use that as the UNIFIED_ROOT
    if [[ $(whoami) == "ec2-user" ]]; then
        if [[ -d "/home/ec2-user/environment" ]]; then
            UNIFIED_ROOT="/home/ec2-user/environment"
            SSO_NAME="/"
            USE_OU_STRUCTURE=true
        fi
    fi
}

# Function to ensure UNIFIED_ROOT directory exists
ensure_unified_root() {
    if [[ ! -d "$UNIFIED_ROOT" ]]; then
        mkdir -p "$UNIFIED_ROOT"
        log "Created UNIFIED_ROOT directory: $UNIFIED_ROOT"
    else
        log "UNIFIED_ROOT directory already exists: $UNIFIED_ROOT"
    fi
}

# Function to determine the correct config file to write to
determine_config_file() {
    if [[ -L "$AWS_CONFIG_FILE" ]]; then
        local target=$(readlink -f "$AWS_CONFIG_FILE")
        if [[ $target == */aws-envs/* ]]; then
            CONFIG_FILE_TO_WRITE="$target"
        else
            CONFIG_FILE_TO_WRITE="$AWS_CONFIG_FILE"
        fi
    else
        CONFIG_FILE_TO_WRITE="$AWS_CONFIG_FILE"
    fi
    log "Config file to write: $CONFIG_FILE_TO_WRITE"
}

# Function to create SSO organization .envrc file
create_sso_org_envrc() {
    local sso_name=$1
    local sso_org_dir

    if [[ -n "$sso_name" ]] && [[ "$sso_name" != "/" ]]; then
        sso_org_dir="${UNIFIED_ROOT}/${sso_name}"
    else
        sso_org_dir="${UNIFIED_ROOT}"
    fi

    mkdir -p "$sso_org_dir"
    local config_dir=$(dirname "$CONFIG_FILE_TO_WRITE")
    
    cat << EOF > "${sso_org_dir}/.envrc"
export AWS_CONFIG_FILE=${config_dir}/config
export AWS_SHARED_CREDENTIALS_FILE=${config_dir}/credentials
EOF
    
    log "Created SSO organization .envrc file at ${sso_org_dir}/.envrc"
    
    # Allow the top-level .envrc file
    (
        cd "${sso_org_dir}" || exit
        direnv allow
    )
    log "Allowed top-level .envrc file with direnv"
}

# Function to ensure AWS config file exists
ensure_aws_config() {
    determine_config_file
    local CONFIG_DIR=$(dirname "$CONFIG_FILE_TO_WRITE")
    test -d "$CONFIG_DIR" || mkdir -p "$CONFIG_DIR"
    test -f "$CONFIG_FILE_TO_WRITE" || touch "$CONFIG_FILE_TO_WRITE"

    if [[ -d ~/.aws/aws-envs ]]; then
        log "Found existing aws-envs directory"
        AWS_PROFILE_ORGANIZER=true
    fi
}

# Function to check if SSO session is configured
is_sso_session_configured() {
    grep -q '\[sso-session sso\]' "$CONFIG_FILE_TO_WRITE"
}

# Function to get SSO start URL
get_sso_start_url() {
    local sso_start_url

    if grep -q 'sso_start_url' "$CONFIG_FILE_TO_WRITE"; then
        log "SSO configuration in place"
        log "Attempting to use existing sso_start_url"
        sso_start_url=$(grep 'sso_start_url' "$CONFIG_FILE_TO_WRITE" | tr -d ' ' | cut -f2 -d'=' | sort -u)
        
        if [[ $(echo "$sso_start_url" | wc -l) -eq 1 ]]; then
            log "Using $sso_start_url for sso_start_url"
            echo "$sso_start_url"
            return
        else
            log "Too many different start URLs found"
        fi
    fi

    while true; do
        read -rp "Please enter your SSO start URL: " sso_start_url
        if [[ $sso_start_url =~ ^https?:// ]]; then
            echo "$sso_start_url"
            return
        else
            log "Invalid URL format. Please enter a valid URL starting with http:// or https://"
        fi
    done
}

# Function to extract SSO name from URL
extract_sso_name() {
    local sso_url=$1
    echo "$sso_url" | sed -n 's/^https:\/\/\([^.]*\)\.awsapps\.com\/.*$/\1/p'
}

# Function to configure SSO session
configure_sso_session() {
    local sso_start_url=$1
    local sso_region

    sso_region=${SSO_REGION:-$DEFAULT_SSO_REGION}

    log "Configuring SSO session"
    {
        echo ""
        echo "[sso-session sso]"
        echo "sso_region = $sso_region"
        echo "sso_start_url = $sso_start_url"
        echo "sso_registration_scopes = sso:account:access"
        echo ""
    } >> "$CONFIG_FILE_TO_WRITE"
}

# Function to perform SSO login
sso_login() {
    if aws sso login --sso-session sso; then
        log "Started SSO session"
        log "Patience please while $CONFIG_FILE_TO_WRITE is completed - this might take a few minutes"
    else
        log "SSO login failed"
        exit 1
    fi
}

# Function to get access token
get_access_token() {
    local token_file
    token_file=$(ls -tr "$SSO_CACHE_DIR" | tail -1)
    
    if [[ ! -s "$SSO_CACHE_DIR/$token_file" ]]; then
        log "No cached token file"
        exit 1
    fi

    local token
    token=$(jq -r .accessToken < "$SSO_CACHE_DIR/$token_file")

    if [[ -z "$token" ]]; then
        log "No access token"
        exit 1
    fi

    echo "$token"
}

# Function to create .envrc file and run cclist if needed
create_envrc_file_and_run_cclist() {
    local sso_name=$1
    local account_name=$2
    local profile_name=$3
    local create_repos_md=$4
    local temp_file=$5
    local account_id=$6
    local use_ou_structure=$7
    local account_dir
    local unified_dir

    if [[ -n "$sso_name" ]] && [[ "$sso_name" != "/" ]]; then
        unified_dir=${UNIFIED_ROOT}/${sso_name}
    else
        unified_dir=${UNIFIED_ROOT}
    fi
    
    if $use_ou_structure; then
        local ou_path
        ou_path=$(find_ou_path "$account_id")
        account_dir="${unified_dir}${ou_path}/${account_name}"
    else
        account_dir="${unified_dir}/${account_name}"
    fi
    
    mkdir -p "${account_dir}"
    mkdir -p "${account_dir}/scratch"

    cat << EOF > "${account_dir}/.envrc"
source_up
export AWS_PROFILE=${profile_name}
export AWS_DEFAULT_REGION=${DEFAULT_SSO_REGION}
EOF

    log "Created .envrc file for ${account_dir}"
    log "Created scratch directory: ${account_dir}/scratch"

    if $create_repos_md; then
        log "Running direnv allow and cclist for ${account_dir}"
        (
            cd "${account_dir}" || exit
            direnv allow
            export AWS_CONFIG_FILE=$temp_file
            cclist --create-repos-md
        )
    fi
}

# Function to generate AWS config
generate_aws_config() {
    local token=$1
    local developer_role_name=$2
    local create_directories=$3
    local sso_name=$4
    local create_repos_md=$5
    local use_ou_structure=$6
    local temp_file
    temp_file=$(mktemp)

    # Create SSO organization .envrc file
    create_sso_org_envrc "$sso_name"

    # Copy existing config without generated part
    sed '/^# >>> BEGIN/,/^# >>> END/d' "$CONFIG_FILE_TO_WRITE" > "$temp_file"

    {
        local profile_for_envrc

        echo "# >>> BEGIN GENERATED CONFIG | $(date) | for ${sso_name} | on $(hostname) <<<"
        aws sso list-accounts --access-token "$token" | tee |
        jq -r '.accountList[] | (.accountId, .accountName)' | 
        sed 'N;s/\n/ /' | 
        while read -r id name; do
            # echo -n "." >&2
            name=$(echo "$name" | tr ' )()' '___')
            local first_role=true
            aws sso list-account-roles --access-token "$token" --account-id "$id" | tee |
            jq -r '.roleList[].roleName' | 
            while read -r rolename; do
                rolename=$(echo "$rolename" | tr ' ' '_')
                profile_name="${rolename}@${name}"
                echo
                echo "[profile ${profile_name}]"
                echo "sso_session = sso"
                echo "sso_account_id = ${id}"
                echo "sso_role_name = ${rolename}"
                echo "region = ${DEFAULT_PROFILE_REGION}"
                
                # Create .envrc file for the first role or the specified developer role if --create-directories is set
                if $create_directories && { $first_role && [ -z "$developer_role_name" ]; } || [ "$rolename" = "$developer_role_name" ]; then
                    create_envrc_file_and_run_cclist "$sso_name" "$name" "$profile_name" "$create_repos_md" "$temp_file" "$id" "$use_ou_structure"
                    first_role=false
                fi
            done
        done
        echo "# >>> END GENERATED CONFIG <<<"
        echo ""
    } >> "$temp_file"

    mv "$temp_file" "$CONFIG_FILE_TO_WRITE"
}

find_ou_path() {
    local account_id="$1"
    local path=""
    local current_id="$account_id"
    local is_account=true

    while true; do
        if $is_account; then
            # Get the parent of the account
            parent_info=$(aws organizations list-parents --child-id "$current_id" --output json 2>/dev/null)
        else
            # Get the parent of the OU
            parent_info=$(aws organizations list-parents --child-id "$current_id" --output json 2>/dev/null)
        fi

        if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve parent information for $current_id" >&2
            return 1
        fi

        parent_id=$(echo "$parent_info" | jq -r '.Parents[0].Id')
        parent_type=$(echo "$parent_info" | jq -r '.Parents[0].Type')

        if [ "$parent_type" == "ROOT" ]; then
            # We've reached the root, prepend it to the path and break
            path="$path"
            break
        elif [ "$parent_type" == "ORGANIZATIONAL_UNIT" ]; then
            # Get the OU name
            ou_info=$(aws organizations describe-organizational-unit --organizational-unit-id "$parent_id" --output json 2>/dev/null)
            if [ $? -ne 0 ]; then
                echo "Error: Failed to retrieve OU information for $parent_id" >&2
                return 1
            fi
            ou_name=$(echo "$ou_info" | jq -r '.OrganizationalUnit.Name')
            path="/$ou_name$path"
        else
            echo "Error: Unexpected parent type: $parent_type" >&2
            return 1
        fi

        current_id="$parent_id"
        is_account=false
    done

    echo "$path"
}

# Function to parse command-line arguments
parse_arguments() {
    CREATE_DIRECTORIES=false
    CREATE_REPOS_MD=false
    DEVELOPER_ROLE_NAME=""
    SSO_NAME="${SSO_NAME:-}"
    USE_OU_STRUCTURE="${USE_OU_STRUCTURE:-false}"
    while [[ $# -gt 0 ]]; do
        case $1 in
            --developer-role-name)
                DEVELOPER_ROLE_NAME="$2"
                shift 2
                ;;
            --create-directories)
                CREATE_DIRECTORIES=true
                shift
                ;;
            --sso-name)
                SSO_NAME="$2"
                shift 2
                ;;
            --create-repos-md)
                CREATE_REPOS_MD=true
                shift
                ;;
            --use-ou-structure)
                USE_OU_STRUCTURE=true
                shift
                ;;
            --skip-sso-name)
                SSO_NAME="/"
                shift
                ;;
            --unified-root)
                if [[ "$2" != /* ]]; then
                    UNIFIED_ROOT="${HOME}/$2"
                else
                    UNIFIED_ROOT="$2"
                fi
                shift 2
                ;;
            --default-profile-region)
                DEFAULT_PROFILE_REGION="$2"
                shift 2
                ;;
            --help)
                help
                exit 0
                ;;
            *)
                log "Unknown option: $1"
                exit 1
                ;;
        esac
    done
}

# Main execution
main() {
    check_cloud9
    parse_arguments "$@"
    ensure_unified_root
    ensure_aws_config

    if ! is_sso_session_configured; then
        sso_start_url=$(get_sso_start_url)
        configure_sso_session "$sso_start_url"
    else
        sso_start_url=$(grep 'sso_start_url' "$CONFIG_FILE_TO_WRITE" | tr -d ' ' | cut -f2 -d'=' | tail -1)
    fi

    if [ -z "$SSO_NAME" ]; then
        SSO_NAME=$(extract_sso_name "$sso_start_url")
    fi

    sso_login
    token=$(get_access_token)
    generate_aws_config "$token" "$DEVELOPER_ROLE_NAME" "$CREATE_DIRECTORIES" "$SSO_NAME" "$CREATE_REPOS_MD" "$USE_OU_STRUCTURE"

    log "AWS configuration completed successfully"
    if $CREATE_DIRECTORIES || test -n "$DEVELOPER_ROLE_NAME"; then
        log ".envrc files creation completed successfully under ${UNIFIED_ROOT}"
        if $CREATE_REPOS_MD; then
            log "cclist --create-repos-md executed for each account directory"
        fi
    else
        log "Directory and .envrc file creation skipped (use --create-directories to enable)"
    fi
}

main "$@"

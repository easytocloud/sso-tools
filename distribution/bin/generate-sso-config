#!/usr/bin/env bash

set -euo pipefail

# Configuration
AWS_CONFIG_FILE="${AWS_CONFIG_FILE:-${HOME}/.aws/config}"
SSO_CACHE_DIR="${HOME}/.aws/sso/cache"
DEFAULT_SSO_REGION="eu-west-1"
SSO_UNIFIED_DIR="${HOME}/sso-unified"

export AWS_DEFAULT_REGION=${DEFAULT_SSO_REGION}
# if ${AWS_CONFIG_FILE} is a symlink, set it to the target
if [[ -L ${AWS_CONFIG_FILE} ]]; then
    AWS_CONFIG_FILE=$(readlink -f ${AWS_CONFIG_FILE})
fi

# Function to log messages
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >&2
}

# Function to ensure AWS config file exists
ensure_aws_config() {
    local AWS_CONFIG_DIR=$(dirname "$AWS_CONFIG_FILE")
    test -d ${AWS_CONFIG_DIR} || mkdir -p "$(dirname "$AWS_CONFIG_FILE")"
    test -f ${AWS_CONFIG_FILE} || touch "$AWS_CONFIG_FILE"
}

# Function to check if SSO session is configured
is_sso_session_configured() {
    grep -q '\[sso-session sso\]' "$AWS_CONFIG_FILE"
}

# Function to get SSO start URL
get_sso_start_url() {
    local sso_start_url

    if grep -q 'sso_start_url' "$AWS_CONFIG_FILE"; then
        log "SSO configuration in place"
        log "Attempting to use existing sso_start_url"
        sso_start_url=$(grep 'sso_start_url' "$AWS_CONFIG_FILE" | tr -d ' ' | cut -f2 -d'=' | sort -u)
        
        if [[ $(echo "$sso_start_url" | wc -l) -eq 1 ]]; then
            log "Using $sso_start_url for sso_start_url"
            echo "$sso_start_url"
            return
        else
            log "Too many different start URLs found"
        fi
    fi

    while true; do
        read -rp "Please enter your SSO start URL: " sso_start_url
        if [[ $sso_start_url =~ ^https?:// ]]; then
            echo "$sso_start_url"
            return
        else
            log "Invalid URL format. Please enter a valid URL starting with http:// or https://"
        fi
    done
}

# Function to extract SSO name from URL
extract_sso_name() {
    local sso_url=$1
    echo "$sso_url" | sed -n 's/^https:\/\/\([^.]*\)\.awsapps\.com\/.*$/\1/p'
}

# Function to configure SSO session
configure_sso_session() {
    local sso_start_url=$1
    local sso_region

    sso_region=${SSO_REGION:-$DEFAULT_SSO_REGION}

    log "Configuring SSO session"
    {
        echo ""
        echo "[sso-session sso]"
        echo "sso_region = $sso_region"
        echo "sso_start_url = $sso_start_url"
        echo "sso_registration_scopes = sso:account:access"
        echo ""
    } >> "$AWS_CONFIG_FILE"
}

# Function to perform SSO login
sso_login() {
    if aws sso login --sso-session sso; then
        log "Started SSO session"
        log "Patience please while $AWS_CONFIG_FILE is completed - this might take a few minutes"
    else
        log "SSO login failed"
        exit 1
    fi
}

# Function to get access token
get_access_token() {
    local token_file
    token_file=$(ls -tr "$SSO_CACHE_DIR" | tail -1)
    
    if [[ ! -s "$SSO_CACHE_DIR/$token_file" ]]; then
        log "No cached token file"
        exit 1
    fi

    local token
    token=$(jq -r .accessToken < "$SSO_CACHE_DIR/$token_file")

    if [[ -z "$token" ]]; then
        log "No access token"
        exit 1
    fi

    echo "$token"
}

# Function to create .envrc file and run cclist if needed
create_envrc_file_and_run_cclist() {
    local sso_name=$1
    local account_name=$2
    local profile_name=$3
    local create_repos_md=$4
    local temp_file=$5
    local account_dir="${SSO_UNIFIED_DIR}/${sso_name}/${account_name}"
    
    mkdir -p "${account_dir}"
    CONFIG_DIR=${AWS_CONFIG_FILE%/*}
    #if parent directory of CONFIG_DIR is named aws-envs then CONFIG_DIR is '~/.aws/aws-envs/<lastpartofCONFIG_DIR>'
    if [[ $(basename $(dirname $CONFIG_DIR)) == "aws-envs" ]]; then
        CONFIG_DIR="~/.aws/aws-envs/$(basename $CONFIG_DIR)"
    fi

    cat << EOF > "${account_dir}/.envrc"
export AWS_CONFIG_FILE=${CONFIG_DIR}/config
export AWS_SHARED_CREDENTIALS_FILE=${CONFIG_DIR}/credentials
export AWS_PROFILE=${profile_name}
export AWS_DEFAULT_REGION=${DEFAULT_SSO_REGION}
EOF

    log "Created .envrc file for ${sso_name}/${account_name}"

    if $create_repos_md; then
        log "Running direnv allow and cclist for ${sso_name}/${account_name}"
        (
            cd "${account_dir}" || exit
            direnv allow
            source .envrc
            export AWS_CONFIG_FILE=$temp_file
            cclist --create-repos-md
        )
    fi
}

# Function to generate AWS config
generate_aws_config() {
    local token=$1
    local developer_role_name=$2
    local create_directories=$3
    local sso_name=$4
    local create_repos_md=$5
    local temp_file
    temp_file=$(mktemp)

    # Copy existing config without generated part
    sed '/^# >>> BEGIN/,/^# >>> END/d' "$AWS_CONFIG_FILE" > "$temp_file"

    {
        local profile_for_envrc

        echo "# >>> BEGIN GENERATED CONFIG <<<"
        aws sso list-accounts --access-token "$token" | 
        jq -r '.accountList[] | (.accountId, .accountName)' | 
        sed 'N;s/\n/ /' | 
        while read -r id name; do
            # echo -n "." >&2
            name=$(echo "$name" | tr ' ' '_')
            local first_role=true
            aws sso list-account-roles --access-token "$token" --account-id "$id" | 
            jq -r '.roleList[].roleName' | 
            while read -r rolename; do
                rolename=$(echo "$rolename" | tr ' ' '_')
                profile_name="${rolename}@${name}"
                echo
                echo "[profile ${profile_name}]"
                echo "sso_session = sso"
                echo "sso_account_id = ${id}"
                echo "sso_role_name = ${rolename}"
                
                # Create .envrc file for the first role or the specified developer role if --create-directories is set
                if $create_directories && { $first_role && [ -z "$developer_role_name" ]; } || [ "$rolename" = "$developer_role_name" ]; then
                    create_envrc_file_and_run_cclist "$sso_name" "$name" "$profile_name" "$create_repos_md" "$temp_file"
                    first_role=false
                fi
            done
        done
        echo "# >>> END GENERATED CONFIG <<<"
        echo ""
    } >> "$temp_file"

    mv "$temp_file" "$AWS_CONFIG_FILE"
}

# Function to parse command-line arguments
parse_arguments() {
    CREATE_DIRECTORIES=false
    CREATE_REPOS_MD=false
    DEVELOPER_ROLE_NAME=""
    SSO_NAME=""
    while [[ $# -gt 0 ]]; do
        case $1 in
            --developer-role-name)
                DEVELOPER_ROLE_NAME="$2"
                shift 2
                ;;
            --create-directories)
                CREATE_DIRECTORIES=true
                shift
                ;;
            --sso-name)
                SSO_NAME="$2"
                shift 2
                ;;
            --create-repos-md)
                CREATE_REPOS_MD=true
                shift
                ;;
            *)
                log "Unknown option: $1"
                exit 1
                ;;
        esac
    done
}

# Main execution
main() {
    parse_arguments "$@"

    ensure_aws_config

    if ! is_sso_session_configured; then
        sso_start_url=$(get_sso_start_url)
        configure_sso_session "$sso_start_url"
    else
        sso_start_url=$(grep 'sso_start_url' "$AWS_CONFIG_FILE" | tr -d ' ' | cut -f2 -d'=' | tail -1)
    fi

    if [ -z "$SSO_NAME" ]; then
        SSO_NAME=$(extract_sso_name "$sso_start_url")
    fi

    sso_login
    token=$(get_access_token)
    generate_aws_config "$token" "$DEVELOPER_ROLE_NAME" "$CREATE_DIRECTORIES" "$SSO_NAME" "$CREATE_REPOS_MD"

    log "AWS configuration completed successfully"
    if $CREATE_DIRECTORIES || test -n "$DEVELOPER_ROLE_NAME"; then
        log ".envrc files creation completed successfully under ${SSO_UNIFIED_DIR}/${SSO_NAME}"
        if $CREATE_REPOS_MD; then
            log "cclist --create-repos-md executed for each account directory"
        fi
    else
        log "Directory and .envrc file creation skipped (use --create-directories to enable)"
    fi
}

main "$@"
